<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.platon.browser.dao.mapper.NodeMapper">
    <resultMap id="BaseResultMap" type="com.platon.browser.dao.entity.Node">
        <id column="node_id" jdbcType="VARCHAR" property="nodeId"/>
        <result column="stat_slash_multi_qty" jdbcType="INTEGER" property="statSlashMultiQty"/>
        <result column="stat_slash_low_qty" jdbcType="INTEGER" property="statSlashLowQty"/>
        <result column="stat_block_qty" jdbcType="BIGINT" property="statBlockQty"/>
        <result column="stat_expect_block_qty" jdbcType="BIGINT" property="statExpectBlockQty"/>
        <result column="stat_verifier_time" jdbcType="INTEGER" property="statVerifierTime"/>
        <result column="is_recommend" jdbcType="INTEGER" property="isRecommend"/>
        <result column="total_value" jdbcType="DECIMAL" property="totalValue"/>
        <result column="staking_block_num" jdbcType="BIGINT" property="stakingBlockNum"/>
        <result column="staking_tx_index" jdbcType="INTEGER" property="stakingTxIndex"/>
        <result column="staking_hes" jdbcType="DECIMAL" property="stakingHes"/>
        <result column="staking_locked" jdbcType="DECIMAL" property="stakingLocked"/>
        <result column="staking_reduction" jdbcType="DECIMAL" property="stakingReduction"/>
        <result column="staking_reduction_epoch" jdbcType="INTEGER" property="stakingReductionEpoch"/>
        <result column="node_name" jdbcType="VARCHAR" property="nodeName"/>
        <result column="node_icon" jdbcType="VARCHAR" property="nodeIcon"/>
        <result column="external_id" jdbcType="VARCHAR" property="externalId"/>
        <result column="external_name" jdbcType="VARCHAR" property="externalName"/>
        <result column="staking_addr" jdbcType="VARCHAR" property="stakingAddr"/>
        <result column="benefit_addr" jdbcType="VARCHAR" property="benefitAddr"/>
        <result column="annualized_rate" jdbcType="DOUBLE" property="annualizedRate"/>
        <result column="program_version" jdbcType="INTEGER" property="programVersion"/>
        <result column="big_version" jdbcType="INTEGER" property="bigVersion"/>
        <result column="web_site" jdbcType="VARCHAR" property="webSite"/>
        <result column="details" jdbcType="VARCHAR" property="details"/>
        <result column="join_time" jdbcType="TIMESTAMP" property="joinTime"/>
        <result column="leave_time" jdbcType="TIMESTAMP" property="leaveTime"/>
        <result column="leave_num" jdbcType="BIGINT" property="leaveNum"/>
        <result column="status" jdbcType="INTEGER" property="status"/>
        <result column="is_consensus" jdbcType="INTEGER" property="isConsensus"/>
        <result column="is_settle" jdbcType="INTEGER" property="isSettle"/>
        <result column="is_init" jdbcType="INTEGER" property="isInit"/>
        <result column="stat_delegate_value" jdbcType="DECIMAL" property="statDelegateValue"/>
        <result column="stat_delegate_released" jdbcType="DECIMAL" property="statDelegateReleased"/>
        <result column="stat_valid_addrs" jdbcType="INTEGER" property="statValidAddrs"/>
        <result column="stat_invalid_addrs" jdbcType="INTEGER" property="statInvalidAddrs"/>
        <result column="stat_block_reward_value" jdbcType="DECIMAL" property="statBlockRewardValue"/>
        <result column="stat_staking_reward_value" jdbcType="DECIMAL" property="statStakingRewardValue"/>
        <result column="stat_fee_reward_value" jdbcType="DECIMAL" property="statFeeRewardValue"/>
        <result column="predict_staking_reward" jdbcType="DECIMAL" property="predictStakingReward"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
        <result column="reward_per" jdbcType="INTEGER" property="rewardPer"/>
        <result column="next_reward_per" jdbcType="INTEGER" property="nextRewardPer"/>
        <result column="next_reward_per_mod_epoch" jdbcType="INTEGER" property="nextRewardPerModEpoch"/>
        <result column="have_dele_reward" jdbcType="DECIMAL" property="haveDeleReward"/>
        <result column="pre_dele_annualized_rate" jdbcType="DOUBLE" property="preDeleAnnualizedRate"/>
        <result column="dele_annualized_rate" jdbcType="DOUBLE" property="deleAnnualizedRate"/>
        <result column="total_dele_reward" jdbcType="DECIMAL" property="totalDeleReward"/>
        <result column="pre_total_dele_reward" jdbcType="DECIMAL" property="preTotalDeleReward"/>
        <result column="exception_status" jdbcType="INTEGER" property="exceptionStatus"/>
        <result column="un_stake_freeze_duration" jdbcType="INTEGER" property="unStakeFreezeDuration"/>
        <result column="un_stake_end_block" jdbcType="BIGINT" property="unStakeEndBlock"/>
        <result column="zero_produce_freeze_duration" jdbcType="INTEGER" property="zeroProduceFreezeDuration"/>
        <result column="zero_produce_freeze_epoch" jdbcType="INTEGER" property="zeroProduceFreezeEpoch"/>
        <result column="low_rate_slash_count" jdbcType="INTEGER" property="lowRateSlashCount"/>
        <result column="annualized_rate_info" jdbcType="LONGVARCHAR" property="annualizedRateInfo"/>
        <result column="node_settle_statis_info" jdbcType="LONGVARCHAR" property="nodeSettleStatisInfo"/>
        <result column="node_apr" jdbcType="LONGVARCHAR" property="nodeApr"/>
    </resultMap>

    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        node_id, stat_slash_multi_qty, stat_slash_low_qty, stat_block_qty, stat_expect_block_qty,
    stat_verifier_time, is_recommend, total_value, staking_block_num, staking_tx_index, 
    staking_hes, staking_locked, staking_reduction, staking_reduction_epoch, node_name, 
    node_icon, external_id, external_name, staking_addr, benefit_addr, annualized_rate, 
    program_version, big_version, web_site, details, join_time, leave_time, leave_num, 
    `status`, is_consensus, is_settle, is_init, stat_delegate_value, stat_delegate_released, 
    stat_valid_addrs, stat_invalid_addrs, stat_block_reward_value, stat_staking_reward_value, 
    stat_fee_reward_value, predict_staking_reward, create_time, update_time, reward_per, 
    next_reward_per, next_reward_per_mod_epoch, have_dele_reward, pre_dele_annualized_rate, 
    dele_annualized_rate, total_dele_reward, pre_total_dele_reward, exception_status, 
    un_stake_freeze_duration, un_stake_end_block, zero_produce_freeze_duration, zero_produce_freeze_epoch, 
    low_rate_slash_count
    </sql>
    <sql id="Blob_Column_List">
        annualized_rate_info, node_settle_statis_info, node_apr
    </sql>
    <select id="selectByExampleWithBLOBs" parameterType="com.platon.browser.dao.entity.NodeExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from node
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByExample" parameterType="com.platon.browser.dao.entity.NodeExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from node
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from node
        where node_id = #{nodeId,jdbcType=VARCHAR}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
        delete
        from node
        where node_id = #{nodeId,jdbcType=VARCHAR}
    </delete>
    <delete id="deleteByExample" parameterType="com.platon.browser.dao.entity.NodeExample">
        delete from node
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.platon.browser.dao.entity.Node">
        insert into node (node_id, stat_slash_multi_qty, stat_slash_low_qty,
                          stat_block_qty, stat_expect_block_qty, stat_verifier_time,
                          is_recommend, total_value, staking_block_num,
                          staking_tx_index, staking_hes, staking_locked,
                          staking_reduction, staking_reduction_epoch,
                          node_name, node_icon, external_id,
                          external_name, staking_addr, benefit_addr,
                          annualized_rate, program_version, big_version,
                          web_site, details, join_time,
                          leave_time, leave_num, `status`,
                          is_consensus, is_settle, is_init,
                          stat_delegate_value, stat_delegate_released,
                          stat_valid_addrs, stat_invalid_addrs, stat_block_reward_value,
                          stat_staking_reward_value, stat_fee_reward_value,
                          predict_staking_reward, create_time, update_time,
                          reward_per, next_reward_per, next_reward_per_mod_epoch,
                          have_dele_reward, pre_dele_annualized_rate, dele_annualized_rate,
                          total_dele_reward, pre_total_dele_reward, exception_status,
                          un_stake_freeze_duration, un_stake_end_block,
                          zero_produce_freeze_duration, zero_produce_freeze_epoch,
                          low_rate_slash_count, annualized_rate_info,
                          node_settle_statis_info, node_apr)
        values (#{nodeId,jdbcType=VARCHAR}, #{statSlashMultiQty,jdbcType=INTEGER}, #{statSlashLowQty,jdbcType=INTEGER},
                #{statBlockQty,jdbcType=BIGINT}, #{statExpectBlockQty,jdbcType=BIGINT}, #{statVerifierTime,jdbcType=INTEGER},
                #{isRecommend,jdbcType=INTEGER}, #{totalValue,jdbcType=DECIMAL}, #{stakingBlockNum,jdbcType=BIGINT},
                #{stakingTxIndex,jdbcType=INTEGER}, #{stakingHes,jdbcType=DECIMAL}, #{stakingLocked,jdbcType=DECIMAL},
                #{stakingReduction,jdbcType=DECIMAL}, #{stakingReductionEpoch,jdbcType=INTEGER},
                #{nodeName,jdbcType=VARCHAR}, #{nodeIcon,jdbcType=VARCHAR}, #{externalId,jdbcType=VARCHAR},
                #{externalName,jdbcType=VARCHAR}, #{stakingAddr,jdbcType=VARCHAR}, #{benefitAddr,jdbcType=VARCHAR},
                #{annualizedRate,jdbcType=DOUBLE}, #{programVersion,jdbcType=INTEGER}, #{bigVersion,jdbcType=INTEGER},
                #{webSite,jdbcType=VARCHAR}, #{details,jdbcType=VARCHAR}, #{joinTime,jdbcType=TIMESTAMP},
                #{leaveTime,jdbcType=TIMESTAMP}, #{leaveNum,jdbcType=BIGINT}, #{status,jdbcType=INTEGER},
                #{isConsensus,jdbcType=INTEGER}, #{isSettle,jdbcType=INTEGER}, #{isInit,jdbcType=INTEGER},
                #{statDelegateValue,jdbcType=DECIMAL}, #{statDelegateReleased,jdbcType=DECIMAL},
                #{statValidAddrs,jdbcType=INTEGER}, #{statInvalidAddrs,jdbcType=INTEGER}, #{statBlockRewardValue,jdbcType=DECIMAL},
                #{statStakingRewardValue,jdbcType=DECIMAL}, #{statFeeRewardValue,jdbcType=DECIMAL},
                #{predictStakingReward,jdbcType=DECIMAL}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP},
                #{rewardPer,jdbcType=INTEGER}, #{nextRewardPer,jdbcType=INTEGER}, #{nextRewardPerModEpoch,jdbcType=INTEGER},
                #{haveDeleReward,jdbcType=DECIMAL}, #{preDeleAnnualizedRate,jdbcType=DOUBLE}, #{deleAnnualizedRate,jdbcType=DOUBLE},
                #{totalDeleReward,jdbcType=DECIMAL}, #{preTotalDeleReward,jdbcType=DECIMAL}, #{exceptionStatus,jdbcType=INTEGER},
                #{unStakeFreezeDuration,jdbcType=INTEGER}, #{unStakeEndBlock,jdbcType=BIGINT},
                #{zeroProduceFreezeDuration,jdbcType=INTEGER}, #{zeroProduceFreezeEpoch,jdbcType=INTEGER},
                #{lowRateSlashCount,jdbcType=INTEGER}, #{annualizedRateInfo,jdbcType=LONGVARCHAR},
                #{nodeSettleStatisInfo,jdbcType=LONGVARCHAR}, #{nodeApr,jdbcType=LONGVARCHAR})
    </insert>
    <insert id="insertSelective" parameterType="com.platon.browser.dao.entity.Node">
        insert into node
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="nodeId != null">
                node_id,
            </if>
            <if test="statSlashMultiQty != null">
                stat_slash_multi_qty,
            </if>
            <if test="statSlashLowQty != null">
                stat_slash_low_qty,
            </if>
            <if test="statBlockQty != null">
                stat_block_qty,
            </if>
            <if test="statExpectBlockQty != null">
                stat_expect_block_qty,
            </if>
            <if test="statVerifierTime != null">
                stat_verifier_time,
            </if>
            <if test="isRecommend != null">
                is_recommend,
            </if>
            <if test="totalValue != null">
                total_value,
            </if>
            <if test="stakingBlockNum != null">
                staking_block_num,
            </if>
            <if test="stakingTxIndex != null">
                staking_tx_index,
            </if>
            <if test="stakingHes != null">
                staking_hes,
            </if>
            <if test="stakingLocked != null">
                staking_locked,
            </if>
            <if test="stakingReduction != null">
                staking_reduction,
            </if>
            <if test="stakingReductionEpoch != null">
                staking_reduction_epoch,
            </if>
            <if test="nodeName != null">
                node_name,
            </if>
            <if test="nodeIcon != null">
                node_icon,
            </if>
            <if test="externalId != null">
                external_id,
            </if>
            <if test="externalName != null">
                external_name,
            </if>
            <if test="stakingAddr != null">
                staking_addr,
            </if>
            <if test="benefitAddr != null">
                benefit_addr,
            </if>
            <if test="annualizedRate != null">
                annualized_rate,
            </if>
            <if test="programVersion != null">
                program_version,
            </if>
            <if test="bigVersion != null">
                big_version,
            </if>
            <if test="webSite != null">
                web_site,
            </if>
            <if test="details != null">
                details,
            </if>
            <if test="joinTime != null">
                join_time,
            </if>
            <if test="leaveTime != null">
                leave_time,
            </if>
            <if test="leaveNum != null">
                leave_num,
            </if>
            <if test="status != null">
                `status`,
            </if>
            <if test="isConsensus != null">
                is_consensus,
            </if>
            <if test="isSettle != null">
                is_settle,
            </if>
            <if test="isInit != null">
                is_init,
            </if>
            <if test="statDelegateValue != null">
                stat_delegate_value,
            </if>
            <if test="statDelegateReleased != null">
                stat_delegate_released,
            </if>
            <if test="statValidAddrs != null">
                stat_valid_addrs,
            </if>
            <if test="statInvalidAddrs != null">
                stat_invalid_addrs,
            </if>
            <if test="statBlockRewardValue != null">
                stat_block_reward_value,
            </if>
            <if test="statStakingRewardValue != null">
                stat_staking_reward_value,
            </if>
            <if test="statFeeRewardValue != null">
                stat_fee_reward_value,
            </if>
            <if test="predictStakingReward != null">
                predict_staking_reward,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
            <if test="rewardPer != null">
                reward_per,
            </if>
            <if test="nextRewardPer != null">
                next_reward_per,
            </if>
            <if test="nextRewardPerModEpoch != null">
                next_reward_per_mod_epoch,
            </if>
            <if test="haveDeleReward != null">
                have_dele_reward,
            </if>
            <if test="preDeleAnnualizedRate != null">
                pre_dele_annualized_rate,
            </if>
            <if test="deleAnnualizedRate != null">
                dele_annualized_rate,
            </if>
            <if test="totalDeleReward != null">
                total_dele_reward,
            </if>
            <if test="preTotalDeleReward != null">
                pre_total_dele_reward,
            </if>
            <if test="exceptionStatus != null">
                exception_status,
            </if>
            <if test="unStakeFreezeDuration != null">
                un_stake_freeze_duration,
            </if>
            <if test="unStakeEndBlock != null">
                un_stake_end_block,
            </if>
            <if test="zeroProduceFreezeDuration != null">
                zero_produce_freeze_duration,
            </if>
            <if test="zeroProduceFreezeEpoch != null">
                zero_produce_freeze_epoch,
            </if>
            <if test="lowRateSlashCount != null">
                low_rate_slash_count,
            </if>
            <if test="annualizedRateInfo != null">
                annualized_rate_info,
            </if>
            <if test="nodeSettleStatisInfo != null">
                node_settle_statis_info,
            </if>
            <if test="nodeApr != null">
                node_apr,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="nodeId != null">
                #{nodeId,jdbcType=VARCHAR},
            </if>
            <if test="statSlashMultiQty != null">
                #{statSlashMultiQty,jdbcType=INTEGER},
            </if>
            <if test="statSlashLowQty != null">
                #{statSlashLowQty,jdbcType=INTEGER},
            </if>
            <if test="statBlockQty != null">
                #{statBlockQty,jdbcType=BIGINT},
            </if>
            <if test="statExpectBlockQty != null">
                #{statExpectBlockQty,jdbcType=BIGINT},
            </if>
            <if test="statVerifierTime != null">
                #{statVerifierTime,jdbcType=INTEGER},
            </if>
            <if test="isRecommend != null">
                #{isRecommend,jdbcType=INTEGER},
            </if>
            <if test="totalValue != null">
                #{totalValue,jdbcType=DECIMAL},
            </if>
            <if test="stakingBlockNum != null">
                #{stakingBlockNum,jdbcType=BIGINT},
            </if>
            <if test="stakingTxIndex != null">
                #{stakingTxIndex,jdbcType=INTEGER},
            </if>
            <if test="stakingHes != null">
                #{stakingHes,jdbcType=DECIMAL},
            </if>
            <if test="stakingLocked != null">
                #{stakingLocked,jdbcType=DECIMAL},
            </if>
            <if test="stakingReduction != null">
                #{stakingReduction,jdbcType=DECIMAL},
            </if>
            <if test="stakingReductionEpoch != null">
                #{stakingReductionEpoch,jdbcType=INTEGER},
            </if>
            <if test="nodeName != null">
                #{nodeName,jdbcType=VARCHAR},
            </if>
            <if test="nodeIcon != null">
                #{nodeIcon,jdbcType=VARCHAR},
            </if>
            <if test="externalId != null">
                #{externalId,jdbcType=VARCHAR},
            </if>
            <if test="externalName != null">
                #{externalName,jdbcType=VARCHAR},
            </if>
            <if test="stakingAddr != null">
                #{stakingAddr,jdbcType=VARCHAR},
            </if>
            <if test="benefitAddr != null">
                #{benefitAddr,jdbcType=VARCHAR},
            </if>
            <if test="annualizedRate != null">
                #{annualizedRate,jdbcType=DOUBLE},
            </if>
            <if test="programVersion != null">
                #{programVersion,jdbcType=INTEGER},
            </if>
            <if test="bigVersion != null">
                #{bigVersion,jdbcType=INTEGER},
            </if>
            <if test="webSite != null">
                #{webSite,jdbcType=VARCHAR},
            </if>
            <if test="details != null">
                #{details,jdbcType=VARCHAR},
            </if>
            <if test="joinTime != null">
                #{joinTime,jdbcType=TIMESTAMP},
            </if>
            <if test="leaveTime != null">
                #{leaveTime,jdbcType=TIMESTAMP},
            </if>
            <if test="leaveNum != null">
                #{leaveNum,jdbcType=BIGINT},
            </if>
            <if test="status != null">
                #{status,jdbcType=INTEGER},
            </if>
            <if test="isConsensus != null">
                #{isConsensus,jdbcType=INTEGER},
            </if>
            <if test="isSettle != null">
                #{isSettle,jdbcType=INTEGER},
            </if>
            <if test="isInit != null">
                #{isInit,jdbcType=INTEGER},
            </if>
            <if test="statDelegateValue != null">
                #{statDelegateValue,jdbcType=DECIMAL},
            </if>
            <if test="statDelegateReleased != null">
                #{statDelegateReleased,jdbcType=DECIMAL},
            </if>
            <if test="statValidAddrs != null">
                #{statValidAddrs,jdbcType=INTEGER},
            </if>
            <if test="statInvalidAddrs != null">
                #{statInvalidAddrs,jdbcType=INTEGER},
            </if>
            <if test="statBlockRewardValue != null">
                #{statBlockRewardValue,jdbcType=DECIMAL},
            </if>
            <if test="statStakingRewardValue != null">
                #{statStakingRewardValue,jdbcType=DECIMAL},
            </if>
            <if test="statFeeRewardValue != null">
                #{statFeeRewardValue,jdbcType=DECIMAL},
            </if>
            <if test="predictStakingReward != null">
                #{predictStakingReward,jdbcType=DECIMAL},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="rewardPer != null">
                #{rewardPer,jdbcType=INTEGER},
            </if>
            <if test="nextRewardPer != null">
                #{nextRewardPer,jdbcType=INTEGER},
            </if>
            <if test="nextRewardPerModEpoch != null">
                #{nextRewardPerModEpoch,jdbcType=INTEGER},
            </if>
            <if test="haveDeleReward != null">
                #{haveDeleReward,jdbcType=DECIMAL},
            </if>
            <if test="preDeleAnnualizedRate != null">
                #{preDeleAnnualizedRate,jdbcType=DOUBLE},
            </if>
            <if test="deleAnnualizedRate != null">
                #{deleAnnualizedRate,jdbcType=DOUBLE},
            </if>
            <if test="totalDeleReward != null">
                #{totalDeleReward,jdbcType=DECIMAL},
            </if>
            <if test="preTotalDeleReward != null">
                #{preTotalDeleReward,jdbcType=DECIMAL},
            </if>
            <if test="exceptionStatus != null">
                #{exceptionStatus,jdbcType=INTEGER},
            </if>
            <if test="unStakeFreezeDuration != null">
                #{unStakeFreezeDuration,jdbcType=INTEGER},
            </if>
            <if test="unStakeEndBlock != null">
                #{unStakeEndBlock,jdbcType=BIGINT},
            </if>
            <if test="zeroProduceFreezeDuration != null">
                #{zeroProduceFreezeDuration,jdbcType=INTEGER},
            </if>
            <if test="zeroProduceFreezeEpoch != null">
                #{zeroProduceFreezeEpoch,jdbcType=INTEGER},
            </if>
            <if test="lowRateSlashCount != null">
                #{lowRateSlashCount,jdbcType=INTEGER},
            </if>
            <if test="annualizedRateInfo != null">
                #{annualizedRateInfo,jdbcType=LONGVARCHAR},
            </if>
            <if test="nodeSettleStatisInfo != null">
                #{nodeSettleStatisInfo,jdbcType=LONGVARCHAR},
            </if>
            <if test="nodeApr != null">
                #{nodeApr,jdbcType=LONGVARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.platon.browser.dao.entity.NodeExample" resultType="java.lang.Long">
        select count(*) from node
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update node
        <set>
            <if test="record.nodeId != null">
                node_id = #{record.nodeId,jdbcType=VARCHAR},
            </if>
            <if test="record.statSlashMultiQty != null">
                stat_slash_multi_qty = #{record.statSlashMultiQty,jdbcType=INTEGER},
            </if>
            <if test="record.statSlashLowQty != null">
                stat_slash_low_qty = #{record.statSlashLowQty,jdbcType=INTEGER},
            </if>
            <if test="record.statBlockQty != null">
                stat_block_qty = #{record.statBlockQty,jdbcType=BIGINT},
            </if>
            <if test="record.statExpectBlockQty != null">
                stat_expect_block_qty = #{record.statExpectBlockQty,jdbcType=BIGINT},
            </if>
            <if test="record.statVerifierTime != null">
                stat_verifier_time = #{record.statVerifierTime,jdbcType=INTEGER},
            </if>
            <if test="record.isRecommend != null">
                is_recommend = #{record.isRecommend,jdbcType=INTEGER},
            </if>
            <if test="record.totalValue != null">
                total_value = #{record.totalValue,jdbcType=DECIMAL},
            </if>
            <if test="record.stakingBlockNum != null">
                staking_block_num = #{record.stakingBlockNum,jdbcType=BIGINT},
            </if>
            <if test="record.stakingTxIndex != null">
                staking_tx_index = #{record.stakingTxIndex,jdbcType=INTEGER},
            </if>
            <if test="record.stakingHes != null">
                staking_hes = #{record.stakingHes,jdbcType=DECIMAL},
            </if>
            <if test="record.stakingLocked != null">
                staking_locked = #{record.stakingLocked,jdbcType=DECIMAL},
            </if>
            <if test="record.stakingReduction != null">
                staking_reduction = #{record.stakingReduction,jdbcType=DECIMAL},
            </if>
            <if test="record.stakingReductionEpoch != null">
                staking_reduction_epoch = #{record.stakingReductionEpoch,jdbcType=INTEGER},
            </if>
            <if test="record.nodeName != null">
                node_name = #{record.nodeName,jdbcType=VARCHAR},
            </if>
            <if test="record.nodeIcon != null">
                node_icon = #{record.nodeIcon,jdbcType=VARCHAR},
            </if>
            <if test="record.externalId != null">
                external_id = #{record.externalId,jdbcType=VARCHAR},
            </if>
            <if test="record.externalName != null">
                external_name = #{record.externalName,jdbcType=VARCHAR},
            </if>
            <if test="record.stakingAddr != null">
                staking_addr = #{record.stakingAddr,jdbcType=VARCHAR},
            </if>
            <if test="record.benefitAddr != null">
                benefit_addr = #{record.benefitAddr,jdbcType=VARCHAR},
            </if>
            <if test="record.annualizedRate != null">
                annualized_rate = #{record.annualizedRate,jdbcType=DOUBLE},
            </if>
            <if test="record.programVersion != null">
                program_version = #{record.programVersion,jdbcType=INTEGER},
            </if>
            <if test="record.bigVersion != null">
                big_version = #{record.bigVersion,jdbcType=INTEGER},
            </if>
            <if test="record.webSite != null">
                web_site = #{record.webSite,jdbcType=VARCHAR},
            </if>
            <if test="record.details != null">
                details = #{record.details,jdbcType=VARCHAR},
            </if>
            <if test="record.joinTime != null">
                join_time = #{record.joinTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.leaveTime != null">
                leave_time = #{record.leaveTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.leaveNum != null">
                leave_num = #{record.leaveNum,jdbcType=BIGINT},
            </if>
            <if test="record.status != null">
                `status` = #{record.status,jdbcType=INTEGER},
            </if>
            <if test="record.isConsensus != null">
                is_consensus = #{record.isConsensus,jdbcType=INTEGER},
            </if>
            <if test="record.isSettle != null">
                is_settle = #{record.isSettle,jdbcType=INTEGER},
            </if>
            <if test="record.isInit != null">
                is_init = #{record.isInit,jdbcType=INTEGER},
            </if>
            <if test="record.statDelegateValue != null">
                stat_delegate_value = #{record.statDelegateValue,jdbcType=DECIMAL},
            </if>
            <if test="record.statDelegateReleased != null">
                stat_delegate_released = #{record.statDelegateReleased,jdbcType=DECIMAL},
            </if>
            <if test="record.statValidAddrs != null">
                stat_valid_addrs = #{record.statValidAddrs,jdbcType=INTEGER},
            </if>
            <if test="record.statInvalidAddrs != null">
                stat_invalid_addrs = #{record.statInvalidAddrs,jdbcType=INTEGER},
            </if>
            <if test="record.statBlockRewardValue != null">
                stat_block_reward_value = #{record.statBlockRewardValue,jdbcType=DECIMAL},
            </if>
            <if test="record.statStakingRewardValue != null">
                stat_staking_reward_value = #{record.statStakingRewardValue,jdbcType=DECIMAL},
            </if>
            <if test="record.statFeeRewardValue != null">
                stat_fee_reward_value = #{record.statFeeRewardValue,jdbcType=DECIMAL},
            </if>
            <if test="record.predictStakingReward != null">
                predict_staking_reward = #{record.predictStakingReward,jdbcType=DECIMAL},
            </if>
            <if test="record.createTime != null">
                create_time = #{record.createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.updateTime != null">
                update_time = #{record.updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.rewardPer != null">
                reward_per = #{record.rewardPer,jdbcType=INTEGER},
            </if>
            <if test="record.nextRewardPer != null">
                next_reward_per = #{record.nextRewardPer,jdbcType=INTEGER},
            </if>
            <if test="record.nextRewardPerModEpoch != null">
                next_reward_per_mod_epoch = #{record.nextRewardPerModEpoch,jdbcType=INTEGER},
            </if>
            <if test="record.haveDeleReward != null">
                have_dele_reward = #{record.haveDeleReward,jdbcType=DECIMAL},
            </if>
            <if test="record.preDeleAnnualizedRate != null">
                pre_dele_annualized_rate = #{record.preDeleAnnualizedRate,jdbcType=DOUBLE},
            </if>
            <if test="record.deleAnnualizedRate != null">
                dele_annualized_rate = #{record.deleAnnualizedRate,jdbcType=DOUBLE},
            </if>
            <if test="record.totalDeleReward != null">
                total_dele_reward = #{record.totalDeleReward,jdbcType=DECIMAL},
            </if>
            <if test="record.preTotalDeleReward != null">
                pre_total_dele_reward = #{record.preTotalDeleReward,jdbcType=DECIMAL},
            </if>
            <if test="record.exceptionStatus != null">
                exception_status = #{record.exceptionStatus,jdbcType=INTEGER},
            </if>
            <if test="record.unStakeFreezeDuration != null">
                un_stake_freeze_duration = #{record.unStakeFreezeDuration,jdbcType=INTEGER},
            </if>
            <if test="record.unStakeEndBlock != null">
                un_stake_end_block = #{record.unStakeEndBlock,jdbcType=BIGINT},
            </if>
            <if test="record.zeroProduceFreezeDuration != null">
                zero_produce_freeze_duration = #{record.zeroProduceFreezeDuration,jdbcType=INTEGER},
            </if>
            <if test="record.zeroProduceFreezeEpoch != null">
                zero_produce_freeze_epoch = #{record.zeroProduceFreezeEpoch,jdbcType=INTEGER},
            </if>
            <if test="record.lowRateSlashCount != null">
                low_rate_slash_count = #{record.lowRateSlashCount,jdbcType=INTEGER},
            </if>
            <if test="record.annualizedRateInfo != null">
                annualized_rate_info = #{record.annualizedRateInfo,jdbcType=LONGVARCHAR},
            </if>
            <if test="record.nodeSettleStatisInfo != null">
                node_settle_statis_info = #{record.nodeSettleStatisInfo,jdbcType=LONGVARCHAR},
            </if>
            <if test="record.nodeApr != null">
                node_apr = #{record.nodeApr,jdbcType=LONGVARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExampleWithBLOBs" parameterType="map">
        update node
        set node_id = #{record.nodeId,jdbcType=VARCHAR},
        stat_slash_multi_qty = #{record.statSlashMultiQty,jdbcType=INTEGER},
        stat_slash_low_qty = #{record.statSlashLowQty,jdbcType=INTEGER},
        stat_block_qty = #{record.statBlockQty,jdbcType=BIGINT},
        stat_expect_block_qty = #{record.statExpectBlockQty,jdbcType=BIGINT},
        stat_verifier_time = #{record.statVerifierTime,jdbcType=INTEGER},
        is_recommend = #{record.isRecommend,jdbcType=INTEGER},
        total_value = #{record.totalValue,jdbcType=DECIMAL},
        staking_block_num = #{record.stakingBlockNum,jdbcType=BIGINT},
        staking_tx_index = #{record.stakingTxIndex,jdbcType=INTEGER},
        staking_hes = #{record.stakingHes,jdbcType=DECIMAL},
        staking_locked = #{record.stakingLocked,jdbcType=DECIMAL},
        staking_reduction = #{record.stakingReduction,jdbcType=DECIMAL},
        staking_reduction_epoch = #{record.stakingReductionEpoch,jdbcType=INTEGER},
        node_name = #{record.nodeName,jdbcType=VARCHAR},
        node_icon = #{record.nodeIcon,jdbcType=VARCHAR},
        external_id = #{record.externalId,jdbcType=VARCHAR},
        external_name = #{record.externalName,jdbcType=VARCHAR},
        staking_addr = #{record.stakingAddr,jdbcType=VARCHAR},
        benefit_addr = #{record.benefitAddr,jdbcType=VARCHAR},
        annualized_rate = #{record.annualizedRate,jdbcType=DOUBLE},
        program_version = #{record.programVersion,jdbcType=INTEGER},
        big_version = #{record.bigVersion,jdbcType=INTEGER},
        web_site = #{record.webSite,jdbcType=VARCHAR},
        details = #{record.details,jdbcType=VARCHAR},
        join_time = #{record.joinTime,jdbcType=TIMESTAMP},
        leave_time = #{record.leaveTime,jdbcType=TIMESTAMP},
        leave_num = #{record.leaveNum,jdbcType=BIGINT},
        `status` = #{record.status,jdbcType=INTEGER},
        is_consensus = #{record.isConsensus,jdbcType=INTEGER},
        is_settle = #{record.isSettle,jdbcType=INTEGER},
        is_init = #{record.isInit,jdbcType=INTEGER},
        stat_delegate_value = #{record.statDelegateValue,jdbcType=DECIMAL},
        stat_delegate_released = #{record.statDelegateReleased,jdbcType=DECIMAL},
        stat_valid_addrs = #{record.statValidAddrs,jdbcType=INTEGER},
        stat_invalid_addrs = #{record.statInvalidAddrs,jdbcType=INTEGER},
        stat_block_reward_value = #{record.statBlockRewardValue,jdbcType=DECIMAL},
        stat_staking_reward_value = #{record.statStakingRewardValue,jdbcType=DECIMAL},
        stat_fee_reward_value = #{record.statFeeRewardValue,jdbcType=DECIMAL},
        predict_staking_reward = #{record.predictStakingReward,jdbcType=DECIMAL},
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
        reward_per = #{record.rewardPer,jdbcType=INTEGER},
        next_reward_per = #{record.nextRewardPer,jdbcType=INTEGER},
        next_reward_per_mod_epoch = #{record.nextRewardPerModEpoch,jdbcType=INTEGER},
        have_dele_reward = #{record.haveDeleReward,jdbcType=DECIMAL},
        pre_dele_annualized_rate = #{record.preDeleAnnualizedRate,jdbcType=DOUBLE},
        dele_annualized_rate = #{record.deleAnnualizedRate,jdbcType=DOUBLE},
        total_dele_reward = #{record.totalDeleReward,jdbcType=DECIMAL},
        pre_total_dele_reward = #{record.preTotalDeleReward,jdbcType=DECIMAL},
        exception_status = #{record.exceptionStatus,jdbcType=INTEGER},
        un_stake_freeze_duration = #{record.unStakeFreezeDuration,jdbcType=INTEGER},
        un_stake_end_block = #{record.unStakeEndBlock,jdbcType=BIGINT},
        zero_produce_freeze_duration = #{record.zeroProduceFreezeDuration,jdbcType=INTEGER},
        zero_produce_freeze_epoch = #{record.zeroProduceFreezeEpoch,jdbcType=INTEGER},
        low_rate_slash_count = #{record.lowRateSlashCount,jdbcType=INTEGER},
        annualized_rate_info = #{record.annualizedRateInfo,jdbcType=LONGVARCHAR},
        node_settle_statis_info = #{record.nodeSettleStatisInfo,jdbcType=LONGVARCHAR},
        node_apr = #{record.nodeApr,jdbcType=LONGVARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update node
        set node_id = #{record.nodeId,jdbcType=VARCHAR},
        stat_slash_multi_qty = #{record.statSlashMultiQty,jdbcType=INTEGER},
        stat_slash_low_qty = #{record.statSlashLowQty,jdbcType=INTEGER},
        stat_block_qty = #{record.statBlockQty,jdbcType=BIGINT},
        stat_expect_block_qty = #{record.statExpectBlockQty,jdbcType=BIGINT},
        stat_verifier_time = #{record.statVerifierTime,jdbcType=INTEGER},
        is_recommend = #{record.isRecommend,jdbcType=INTEGER},
        total_value = #{record.totalValue,jdbcType=DECIMAL},
        staking_block_num = #{record.stakingBlockNum,jdbcType=BIGINT},
        staking_tx_index = #{record.stakingTxIndex,jdbcType=INTEGER},
        staking_hes = #{record.stakingHes,jdbcType=DECIMAL},
        staking_locked = #{record.stakingLocked,jdbcType=DECIMAL},
        staking_reduction = #{record.stakingReduction,jdbcType=DECIMAL},
        staking_reduction_epoch = #{record.stakingReductionEpoch,jdbcType=INTEGER},
        node_name = #{record.nodeName,jdbcType=VARCHAR},
        node_icon = #{record.nodeIcon,jdbcType=VARCHAR},
        external_id = #{record.externalId,jdbcType=VARCHAR},
        external_name = #{record.externalName,jdbcType=VARCHAR},
        staking_addr = #{record.stakingAddr,jdbcType=VARCHAR},
        benefit_addr = #{record.benefitAddr,jdbcType=VARCHAR},
        annualized_rate = #{record.annualizedRate,jdbcType=DOUBLE},
        program_version = #{record.programVersion,jdbcType=INTEGER},
        big_version = #{record.bigVersion,jdbcType=INTEGER},
        web_site = #{record.webSite,jdbcType=VARCHAR},
        details = #{record.details,jdbcType=VARCHAR},
        join_time = #{record.joinTime,jdbcType=TIMESTAMP},
        leave_time = #{record.leaveTime,jdbcType=TIMESTAMP},
        leave_num = #{record.leaveNum,jdbcType=BIGINT},
        `status` = #{record.status,jdbcType=INTEGER},
        is_consensus = #{record.isConsensus,jdbcType=INTEGER},
        is_settle = #{record.isSettle,jdbcType=INTEGER},
        is_init = #{record.isInit,jdbcType=INTEGER},
        stat_delegate_value = #{record.statDelegateValue,jdbcType=DECIMAL},
        stat_delegate_released = #{record.statDelegateReleased,jdbcType=DECIMAL},
        stat_valid_addrs = #{record.statValidAddrs,jdbcType=INTEGER},
        stat_invalid_addrs = #{record.statInvalidAddrs,jdbcType=INTEGER},
        stat_block_reward_value = #{record.statBlockRewardValue,jdbcType=DECIMAL},
        stat_staking_reward_value = #{record.statStakingRewardValue,jdbcType=DECIMAL},
        stat_fee_reward_value = #{record.statFeeRewardValue,jdbcType=DECIMAL},
        predict_staking_reward = #{record.predictStakingReward,jdbcType=DECIMAL},
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
        reward_per = #{record.rewardPer,jdbcType=INTEGER},
        next_reward_per = #{record.nextRewardPer,jdbcType=INTEGER},
        next_reward_per_mod_epoch = #{record.nextRewardPerModEpoch,jdbcType=INTEGER},
        have_dele_reward = #{record.haveDeleReward,jdbcType=DECIMAL},
        pre_dele_annualized_rate = #{record.preDeleAnnualizedRate,jdbcType=DOUBLE},
        dele_annualized_rate = #{record.deleAnnualizedRate,jdbcType=DOUBLE},
        total_dele_reward = #{record.totalDeleReward,jdbcType=DECIMAL},
        pre_total_dele_reward = #{record.preTotalDeleReward,jdbcType=DECIMAL},
        exception_status = #{record.exceptionStatus,jdbcType=INTEGER},
        un_stake_freeze_duration = #{record.unStakeFreezeDuration,jdbcType=INTEGER},
        un_stake_end_block = #{record.unStakeEndBlock,jdbcType=BIGINT},
        zero_produce_freeze_duration = #{record.zeroProduceFreezeDuration,jdbcType=INTEGER},
        zero_produce_freeze_epoch = #{record.zeroProduceFreezeEpoch,jdbcType=INTEGER},
        low_rate_slash_count = #{record.lowRateSlashCount,jdbcType=INTEGER}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.platon.browser.dao.entity.Node">
        update node
        <set>
            <if test="statSlashMultiQty != null">
                stat_slash_multi_qty = #{statSlashMultiQty,jdbcType=INTEGER},
            </if>
            <if test="statSlashLowQty != null">
                stat_slash_low_qty = #{statSlashLowQty,jdbcType=INTEGER},
            </if>
            <if test="statBlockQty != null">
                stat_block_qty = #{statBlockQty,jdbcType=BIGINT},
            </if>
            <if test="statExpectBlockQty != null">
                stat_expect_block_qty = #{statExpectBlockQty,jdbcType=BIGINT},
            </if>
            <if test="statVerifierTime != null">
                stat_verifier_time = #{statVerifierTime,jdbcType=INTEGER},
            </if>
            <if test="isRecommend != null">
                is_recommend = #{isRecommend,jdbcType=INTEGER},
            </if>
            <if test="totalValue != null">
                total_value = #{totalValue,jdbcType=DECIMAL},
            </if>
            <if test="stakingBlockNum != null">
                staking_block_num = #{stakingBlockNum,jdbcType=BIGINT},
            </if>
            <if test="stakingTxIndex != null">
                staking_tx_index = #{stakingTxIndex,jdbcType=INTEGER},
            </if>
            <if test="stakingHes != null">
                staking_hes = #{stakingHes,jdbcType=DECIMAL},
            </if>
            <if test="stakingLocked != null">
                staking_locked = #{stakingLocked,jdbcType=DECIMAL},
            </if>
            <if test="stakingReduction != null">
                staking_reduction = #{stakingReduction,jdbcType=DECIMAL},
            </if>
            <if test="stakingReductionEpoch != null">
                staking_reduction_epoch = #{stakingReductionEpoch,jdbcType=INTEGER},
            </if>
            <if test="nodeName != null">
                node_name = #{nodeName,jdbcType=VARCHAR},
            </if>
            <if test="nodeIcon != null">
                node_icon = #{nodeIcon,jdbcType=VARCHAR},
            </if>
            <if test="externalId != null">
                external_id = #{externalId,jdbcType=VARCHAR},
            </if>
            <if test="externalName != null">
                external_name = #{externalName,jdbcType=VARCHAR},
            </if>
            <if test="stakingAddr != null">
                staking_addr = #{stakingAddr,jdbcType=VARCHAR},
            </if>
            <if test="benefitAddr != null">
                benefit_addr = #{benefitAddr,jdbcType=VARCHAR},
            </if>
            <if test="annualizedRate != null">
                annualized_rate = #{annualizedRate,jdbcType=DOUBLE},
            </if>
            <if test="programVersion != null">
                program_version = #{programVersion,jdbcType=INTEGER},
            </if>
            <if test="bigVersion != null">
                big_version = #{bigVersion,jdbcType=INTEGER},
            </if>
            <if test="webSite != null">
                web_site = #{webSite,jdbcType=VARCHAR},
            </if>
            <if test="details != null">
                details = #{details,jdbcType=VARCHAR},
            </if>
            <if test="joinTime != null">
                join_time = #{joinTime,jdbcType=TIMESTAMP},
            </if>
            <if test="leaveTime != null">
                leave_time = #{leaveTime,jdbcType=TIMESTAMP},
            </if>
            <if test="leaveNum != null">
                leave_num = #{leaveNum,jdbcType=BIGINT},
            </if>
            <if test="status != null">
                `status` = #{status,jdbcType=INTEGER},
            </if>
            <if test="isConsensus != null">
                is_consensus = #{isConsensus,jdbcType=INTEGER},
            </if>
            <if test="isSettle != null">
                is_settle = #{isSettle,jdbcType=INTEGER},
            </if>
            <if test="isInit != null">
                is_init = #{isInit,jdbcType=INTEGER},
            </if>
            <if test="statDelegateValue != null">
                stat_delegate_value = #{statDelegateValue,jdbcType=DECIMAL},
            </if>
            <if test="statDelegateReleased != null">
                stat_delegate_released = #{statDelegateReleased,jdbcType=DECIMAL},
            </if>
            <if test="statValidAddrs != null">
                stat_valid_addrs = #{statValidAddrs,jdbcType=INTEGER},
            </if>
            <if test="statInvalidAddrs != null">
                stat_invalid_addrs = #{statInvalidAddrs,jdbcType=INTEGER},
            </if>
            <if test="statBlockRewardValue != null">
                stat_block_reward_value = #{statBlockRewardValue,jdbcType=DECIMAL},
            </if>
            <if test="statStakingRewardValue != null">
                stat_staking_reward_value = #{statStakingRewardValue,jdbcType=DECIMAL},
            </if>
            <if test="statFeeRewardValue != null">
                stat_fee_reward_value = #{statFeeRewardValue,jdbcType=DECIMAL},
            </if>
            <if test="predictStakingReward != null">
                predict_staking_reward = #{predictStakingReward,jdbcType=DECIMAL},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="rewardPer != null">
                reward_per = #{rewardPer,jdbcType=INTEGER},
            </if>
            <if test="nextRewardPer != null">
                next_reward_per = #{nextRewardPer,jdbcType=INTEGER},
            </if>
            <if test="nextRewardPerModEpoch != null">
                next_reward_per_mod_epoch = #{nextRewardPerModEpoch,jdbcType=INTEGER},
            </if>
            <if test="haveDeleReward != null">
                have_dele_reward = #{haveDeleReward,jdbcType=DECIMAL},
            </if>
            <if test="preDeleAnnualizedRate != null">
                pre_dele_annualized_rate = #{preDeleAnnualizedRate,jdbcType=DOUBLE},
            </if>
            <if test="deleAnnualizedRate != null">
                dele_annualized_rate = #{deleAnnualizedRate,jdbcType=DOUBLE},
            </if>
            <if test="totalDeleReward != null">
                total_dele_reward = #{totalDeleReward,jdbcType=DECIMAL},
            </if>
            <if test="preTotalDeleReward != null">
                pre_total_dele_reward = #{preTotalDeleReward,jdbcType=DECIMAL},
            </if>
            <if test="exceptionStatus != null">
                exception_status = #{exceptionStatus,jdbcType=INTEGER},
            </if>
            <if test="unStakeFreezeDuration != null">
                un_stake_freeze_duration = #{unStakeFreezeDuration,jdbcType=INTEGER},
            </if>
            <if test="unStakeEndBlock != null">
                un_stake_end_block = #{unStakeEndBlock,jdbcType=BIGINT},
            </if>
            <if test="zeroProduceFreezeDuration != null">
                zero_produce_freeze_duration = #{zeroProduceFreezeDuration,jdbcType=INTEGER},
            </if>
            <if test="zeroProduceFreezeEpoch != null">
                zero_produce_freeze_epoch = #{zeroProduceFreezeEpoch,jdbcType=INTEGER},
            </if>
            <if test="lowRateSlashCount != null">
                low_rate_slash_count = #{lowRateSlashCount,jdbcType=INTEGER},
            </if>
            <if test="annualizedRateInfo != null">
                annualized_rate_info = #{annualizedRateInfo,jdbcType=LONGVARCHAR},
            </if>
            <if test="nodeSettleStatisInfo != null">
                node_settle_statis_info = #{nodeSettleStatisInfo,jdbcType=LONGVARCHAR},
            </if>
            <if test="nodeApr != null">
                node_apr = #{nodeApr,jdbcType=LONGVARCHAR},
            </if>
        </set>
        where node_id = #{nodeId,jdbcType=VARCHAR}
    </update>
    <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.platon.browser.dao.entity.Node">
        update node
        set stat_slash_multi_qty         = #{statSlashMultiQty,jdbcType=INTEGER},
            stat_slash_low_qty           = #{statSlashLowQty,jdbcType=INTEGER},
            stat_block_qty               = #{statBlockQty,jdbcType=BIGINT},
            stat_expect_block_qty        = #{statExpectBlockQty,jdbcType=BIGINT},
            stat_verifier_time           = #{statVerifierTime,jdbcType=INTEGER},
            is_recommend                 = #{isRecommend,jdbcType=INTEGER},
            total_value                  = #{totalValue,jdbcType=DECIMAL},
            staking_block_num            = #{stakingBlockNum,jdbcType=BIGINT},
            staking_tx_index             = #{stakingTxIndex,jdbcType=INTEGER},
            staking_hes                  = #{stakingHes,jdbcType=DECIMAL},
            staking_locked               = #{stakingLocked,jdbcType=DECIMAL},
            staking_reduction            = #{stakingReduction,jdbcType=DECIMAL},
            staking_reduction_epoch      = #{stakingReductionEpoch,jdbcType=INTEGER},
            node_name                    = #{nodeName,jdbcType=VARCHAR},
            node_icon                    = #{nodeIcon,jdbcType=VARCHAR},
            external_id                  = #{externalId,jdbcType=VARCHAR},
            external_name                = #{externalName,jdbcType=VARCHAR},
            staking_addr                 = #{stakingAddr,jdbcType=VARCHAR},
            benefit_addr                 = #{benefitAddr,jdbcType=VARCHAR},
            annualized_rate              = #{annualizedRate,jdbcType=DOUBLE},
            program_version              = #{programVersion,jdbcType=INTEGER},
            big_version                  = #{bigVersion,jdbcType=INTEGER},
            web_site                     = #{webSite,jdbcType=VARCHAR},
            details                      = #{details,jdbcType=VARCHAR},
            join_time                    = #{joinTime,jdbcType=TIMESTAMP},
            leave_time                   = #{leaveTime,jdbcType=TIMESTAMP},
            leave_num                    = #{leaveNum,jdbcType=BIGINT},
            `status`                     = #{status,jdbcType=INTEGER},
            is_consensus                 = #{isConsensus,jdbcType=INTEGER},
            is_settle                    = #{isSettle,jdbcType=INTEGER},
            is_init                      = #{isInit,jdbcType=INTEGER},
            stat_delegate_value          = #{statDelegateValue,jdbcType=DECIMAL},
            stat_delegate_released       = #{statDelegateReleased,jdbcType=DECIMAL},
            stat_valid_addrs             = #{statValidAddrs,jdbcType=INTEGER},
            stat_invalid_addrs           = #{statInvalidAddrs,jdbcType=INTEGER},
            stat_block_reward_value      = #{statBlockRewardValue,jdbcType=DECIMAL},
            stat_staking_reward_value    = #{statStakingRewardValue,jdbcType=DECIMAL},
            stat_fee_reward_value        = #{statFeeRewardValue,jdbcType=DECIMAL},
            predict_staking_reward       = #{predictStakingReward,jdbcType=DECIMAL},
            create_time                  = #{createTime,jdbcType=TIMESTAMP},
            update_time                  = #{updateTime,jdbcType=TIMESTAMP},
            reward_per                   = #{rewardPer,jdbcType=INTEGER},
            next_reward_per              = #{nextRewardPer,jdbcType=INTEGER},
            next_reward_per_mod_epoch    = #{nextRewardPerModEpoch,jdbcType=INTEGER},
            have_dele_reward             = #{haveDeleReward,jdbcType=DECIMAL},
            pre_dele_annualized_rate     = #{preDeleAnnualizedRate,jdbcType=DOUBLE},
            dele_annualized_rate         = #{deleAnnualizedRate,jdbcType=DOUBLE},
            total_dele_reward            = #{totalDeleReward,jdbcType=DECIMAL},
            pre_total_dele_reward        = #{preTotalDeleReward,jdbcType=DECIMAL},
            exception_status             = #{exceptionStatus,jdbcType=INTEGER},
            un_stake_freeze_duration     = #{unStakeFreezeDuration,jdbcType=INTEGER},
            un_stake_end_block           = #{unStakeEndBlock,jdbcType=BIGINT},
            zero_produce_freeze_duration = #{zeroProduceFreezeDuration,jdbcType=INTEGER},
            zero_produce_freeze_epoch    = #{zeroProduceFreezeEpoch,jdbcType=INTEGER},
            low_rate_slash_count         = #{lowRateSlashCount,jdbcType=INTEGER},
            annualized_rate_info         = #{annualizedRateInfo,jdbcType=LONGVARCHAR},
            node_settle_statis_info      = #{nodeSettleStatisInfo,jdbcType=LONGVARCHAR},
            node_apr                     = #{nodeApr,jdbcType=LONGVARCHAR}
        where node_id = #{nodeId,jdbcType=VARCHAR}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.platon.browser.dao.entity.Node">
        update node
        set stat_slash_multi_qty         = #{statSlashMultiQty,jdbcType=INTEGER},
            stat_slash_low_qty           = #{statSlashLowQty,jdbcType=INTEGER},
            stat_block_qty               = #{statBlockQty,jdbcType=BIGINT},
            stat_expect_block_qty        = #{statExpectBlockQty,jdbcType=BIGINT},
            stat_verifier_time           = #{statVerifierTime,jdbcType=INTEGER},
            is_recommend                 = #{isRecommend,jdbcType=INTEGER},
            total_value                  = #{totalValue,jdbcType=DECIMAL},
            staking_block_num            = #{stakingBlockNum,jdbcType=BIGINT},
            staking_tx_index             = #{stakingTxIndex,jdbcType=INTEGER},
            staking_hes                  = #{stakingHes,jdbcType=DECIMAL},
            staking_locked               = #{stakingLocked,jdbcType=DECIMAL},
            staking_reduction            = #{stakingReduction,jdbcType=DECIMAL},
            staking_reduction_epoch      = #{stakingReductionEpoch,jdbcType=INTEGER},
            node_name                    = #{nodeName,jdbcType=VARCHAR},
            node_icon                    = #{nodeIcon,jdbcType=VARCHAR},
            external_id                  = #{externalId,jdbcType=VARCHAR},
            external_name                = #{externalName,jdbcType=VARCHAR},
            staking_addr                 = #{stakingAddr,jdbcType=VARCHAR},
            benefit_addr                 = #{benefitAddr,jdbcType=VARCHAR},
            annualized_rate              = #{annualizedRate,jdbcType=DOUBLE},
            program_version              = #{programVersion,jdbcType=INTEGER},
            big_version                  = #{bigVersion,jdbcType=INTEGER},
            web_site                     = #{webSite,jdbcType=VARCHAR},
            details                      = #{details,jdbcType=VARCHAR},
            join_time                    = #{joinTime,jdbcType=TIMESTAMP},
            leave_time                   = #{leaveTime,jdbcType=TIMESTAMP},
            leave_num                    = #{leaveNum,jdbcType=BIGINT},
            `status`                     = #{status,jdbcType=INTEGER},
            is_consensus                 = #{isConsensus,jdbcType=INTEGER},
            is_settle                    = #{isSettle,jdbcType=INTEGER},
            is_init                      = #{isInit,jdbcType=INTEGER},
            stat_delegate_value          = #{statDelegateValue,jdbcType=DECIMAL},
            stat_delegate_released       = #{statDelegateReleased,jdbcType=DECIMAL},
            stat_valid_addrs             = #{statValidAddrs,jdbcType=INTEGER},
            stat_invalid_addrs           = #{statInvalidAddrs,jdbcType=INTEGER},
            stat_block_reward_value      = #{statBlockRewardValue,jdbcType=DECIMAL},
            stat_staking_reward_value    = #{statStakingRewardValue,jdbcType=DECIMAL},
            stat_fee_reward_value        = #{statFeeRewardValue,jdbcType=DECIMAL},
            predict_staking_reward       = #{predictStakingReward,jdbcType=DECIMAL},
            create_time                  = #{createTime,jdbcType=TIMESTAMP},
            update_time                  = #{updateTime,jdbcType=TIMESTAMP},
            reward_per                   = #{rewardPer,jdbcType=INTEGER},
            next_reward_per              = #{nextRewardPer,jdbcType=INTEGER},
            next_reward_per_mod_epoch    = #{nextRewardPerModEpoch,jdbcType=INTEGER},
            have_dele_reward             = #{haveDeleReward,jdbcType=DECIMAL},
            pre_dele_annualized_rate     = #{preDeleAnnualizedRate,jdbcType=DOUBLE},
            dele_annualized_rate         = #{deleAnnualizedRate,jdbcType=DOUBLE},
            total_dele_reward            = #{totalDeleReward,jdbcType=DECIMAL},
            pre_total_dele_reward        = #{preTotalDeleReward,jdbcType=DECIMAL},
            exception_status             = #{exceptionStatus,jdbcType=INTEGER},
            un_stake_freeze_duration     = #{unStakeFreezeDuration,jdbcType=INTEGER},
            un_stake_end_block           = #{unStakeEndBlock,jdbcType=BIGINT},
            zero_produce_freeze_duration = #{zeroProduceFreezeDuration,jdbcType=INTEGER},
            zero_produce_freeze_epoch    = #{zeroProduceFreezeEpoch,jdbcType=INTEGER},
            low_rate_slash_count         = #{lowRateSlashCount,jdbcType=INTEGER}
        where node_id = #{nodeId,jdbcType=VARCHAR}
    </update>
    <insert id="batchInsert" parameterType="map">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
          @project https://github.com/itfsw/mybatis-generator-plugin
        -->
        insert into node
        (node_id, stat_slash_multi_qty, stat_slash_low_qty, stat_block_qty, stat_expect_block_qty,
        stat_verifier_time, is_recommend, total_value, staking_block_num, staking_tx_index,
        staking_hes, staking_locked, staking_reduction, staking_reduction_epoch, node_name,
        node_icon, external_id, external_name, staking_addr, benefit_addr, annualized_rate,
        program_version, big_version, web_site, details, join_time, leave_time, leave_num,
        `status`, is_consensus, is_settle, is_init, stat_delegate_value, stat_delegate_released,
        stat_valid_addrs, stat_invalid_addrs, stat_block_reward_value, stat_staking_reward_value,
        stat_fee_reward_value, predict_staking_reward, create_time, update_time, reward_per,
        next_reward_per, next_reward_per_mod_epoch, have_dele_reward, pre_dele_annualized_rate,
        dele_annualized_rate, total_dele_reward, pre_total_dele_reward, exception_status,
        un_stake_freeze_duration, un_stake_end_block, zero_produce_freeze_duration, zero_produce_freeze_epoch,
        low_rate_slash_count, annualized_rate_info, node_settle_statis_info, node_apr)
        values
        <foreach collection="list" item="item" separator=",">
            (#{item.nodeId,jdbcType=VARCHAR}, #{item.statSlashMultiQty,jdbcType=INTEGER}, #{item.statSlashLowQty,jdbcType=INTEGER},
            #{item.statBlockQty,jdbcType=BIGINT}, #{item.statExpectBlockQty,jdbcType=BIGINT},
            #{item.statVerifierTime,jdbcType=INTEGER}, #{item.isRecommend,jdbcType=INTEGER},
            #{item.totalValue,jdbcType=DECIMAL}, #{item.stakingBlockNum,jdbcType=BIGINT}, #{item.stakingTxIndex,jdbcType=INTEGER},
            #{item.stakingHes,jdbcType=DECIMAL}, #{item.stakingLocked,jdbcType=DECIMAL}, #{item.stakingReduction,jdbcType=DECIMAL},
            #{item.stakingReductionEpoch,jdbcType=INTEGER}, #{item.nodeName,jdbcType=VARCHAR},
            #{item.nodeIcon,jdbcType=VARCHAR}, #{item.externalId,jdbcType=VARCHAR}, #{item.externalName,jdbcType=VARCHAR},
            #{item.stakingAddr,jdbcType=VARCHAR}, #{item.benefitAddr,jdbcType=VARCHAR}, #{item.annualizedRate,jdbcType=DOUBLE},
            #{item.programVersion,jdbcType=INTEGER}, #{item.bigVersion,jdbcType=INTEGER}, #{item.webSite,jdbcType=VARCHAR},
            #{item.details,jdbcType=VARCHAR}, #{item.joinTime,jdbcType=TIMESTAMP}, #{item.leaveTime,jdbcType=TIMESTAMP},
            #{item.leaveNum,jdbcType=BIGINT}, #{item.status,jdbcType=INTEGER}, #{item.isConsensus,jdbcType=INTEGER},
            #{item.isSettle,jdbcType=INTEGER}, #{item.isInit,jdbcType=INTEGER}, #{item.statDelegateValue,jdbcType=DECIMAL},
            #{item.statDelegateReleased,jdbcType=DECIMAL}, #{item.statValidAddrs,jdbcType=INTEGER},
            #{item.statInvalidAddrs,jdbcType=INTEGER}, #{item.statBlockRewardValue,jdbcType=DECIMAL},
            #{item.statStakingRewardValue,jdbcType=DECIMAL}, #{item.statFeeRewardValue,jdbcType=DECIMAL},
            #{item.predictStakingReward,jdbcType=DECIMAL}, #{item.createTime,jdbcType=TIMESTAMP},
            #{item.updateTime,jdbcType=TIMESTAMP}, #{item.rewardPer,jdbcType=INTEGER}, #{item.nextRewardPer,jdbcType=INTEGER},
            #{item.nextRewardPerModEpoch,jdbcType=INTEGER}, #{item.haveDeleReward,jdbcType=DECIMAL},
            #{item.preDeleAnnualizedRate,jdbcType=DOUBLE}, #{item.deleAnnualizedRate,jdbcType=DOUBLE},
            #{item.totalDeleReward,jdbcType=DECIMAL}, #{item.preTotalDeleReward,jdbcType=DECIMAL},
            #{item.exceptionStatus,jdbcType=INTEGER}, #{item.unStakeFreezeDuration,jdbcType=INTEGER},
            #{item.unStakeEndBlock,jdbcType=BIGINT}, #{item.zeroProduceFreezeDuration,jdbcType=INTEGER},
            #{item.zeroProduceFreezeEpoch,jdbcType=INTEGER}, #{item.lowRateSlashCount,jdbcType=INTEGER},
            #{item.annualizedRateInfo,jdbcType=LONGVARCHAR}, #{item.nodeSettleStatisInfo,jdbcType=LONGVARCHAR},
            #{item.nodeApr,jdbcType=LONGVARCHAR})
        </foreach>
    </insert>
    <insert id="batchInsertSelective" parameterType="map">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
          @project https://github.com/itfsw/mybatis-generator-plugin
        -->
        insert into node (
        <foreach collection="selective" item="column" separator=",">
            ${column.escapedColumnName}
        </foreach>
        )
        values
        <foreach collection="list" item="item" separator=",">
            (
            <foreach collection="selective" item="column" separator=",">
                <if test="'node_id'.toString() == column.value">
                    #{item.nodeId,jdbcType=VARCHAR}
                </if>
                <if test="'stat_slash_multi_qty'.toString() == column.value">
                    #{item.statSlashMultiQty,jdbcType=INTEGER}
                </if>
                <if test="'stat_slash_low_qty'.toString() == column.value">
                    #{item.statSlashLowQty,jdbcType=INTEGER}
                </if>
                <if test="'stat_block_qty'.toString() == column.value">
                    #{item.statBlockQty,jdbcType=BIGINT}
                </if>
                <if test="'stat_expect_block_qty'.toString() == column.value">
                    #{item.statExpectBlockQty,jdbcType=BIGINT}
                </if>
                <if test="'stat_verifier_time'.toString() == column.value">
                    #{item.statVerifierTime,jdbcType=INTEGER}
                </if>
                <if test="'is_recommend'.toString() == column.value">
                    #{item.isRecommend,jdbcType=INTEGER}
                </if>
                <if test="'total_value'.toString() == column.value">
                    #{item.totalValue,jdbcType=DECIMAL}
                </if>
                <if test="'staking_block_num'.toString() == column.value">
                    #{item.stakingBlockNum,jdbcType=BIGINT}
                </if>
                <if test="'staking_tx_index'.toString() == column.value">
                    #{item.stakingTxIndex,jdbcType=INTEGER}
                </if>
                <if test="'staking_hes'.toString() == column.value">
                    #{item.stakingHes,jdbcType=DECIMAL}
                </if>
                <if test="'staking_locked'.toString() == column.value">
                    #{item.stakingLocked,jdbcType=DECIMAL}
                </if>
                <if test="'staking_reduction'.toString() == column.value">
                    #{item.stakingReduction,jdbcType=DECIMAL}
                </if>
                <if test="'staking_reduction_epoch'.toString() == column.value">
                    #{item.stakingReductionEpoch,jdbcType=INTEGER}
                </if>
                <if test="'node_name'.toString() == column.value">
                    #{item.nodeName,jdbcType=VARCHAR}
                </if>
                <if test="'node_icon'.toString() == column.value">
                    #{item.nodeIcon,jdbcType=VARCHAR}
                </if>
                <if test="'external_id'.toString() == column.value">
                    #{item.externalId,jdbcType=VARCHAR}
                </if>
                <if test="'external_name'.toString() == column.value">
                    #{item.externalName,jdbcType=VARCHAR}
                </if>
                <if test="'staking_addr'.toString() == column.value">
                    #{item.stakingAddr,jdbcType=VARCHAR}
                </if>
                <if test="'benefit_addr'.toString() == column.value">
                    #{item.benefitAddr,jdbcType=VARCHAR}
                </if>
                <if test="'annualized_rate'.toString() == column.value">
                    #{item.annualizedRate,jdbcType=DOUBLE}
                </if>
                <if test="'program_version'.toString() == column.value">
                    #{item.programVersion,jdbcType=INTEGER}
                </if>
                <if test="'big_version'.toString() == column.value">
                    #{item.bigVersion,jdbcType=INTEGER}
                </if>
                <if test="'web_site'.toString() == column.value">
                    #{item.webSite,jdbcType=VARCHAR}
                </if>
                <if test="'details'.toString() == column.value">
                    #{item.details,jdbcType=VARCHAR}
                </if>
                <if test="'join_time'.toString() == column.value">
                    #{item.joinTime,jdbcType=TIMESTAMP}
                </if>
                <if test="'leave_time'.toString() == column.value">
                    #{item.leaveTime,jdbcType=TIMESTAMP}
                </if>
                <if test="'leave_num'.toString() == column.value">
                    #{item.leaveNum,jdbcType=BIGINT}
                </if>
                <if test="'status'.toString() == column.value">
                    #{item.status,jdbcType=INTEGER}
                </if>
                <if test="'is_consensus'.toString() == column.value">
                    #{item.isConsensus,jdbcType=INTEGER}
                </if>
                <if test="'is_settle'.toString() == column.value">
                    #{item.isSettle,jdbcType=INTEGER}
                </if>
                <if test="'is_init'.toString() == column.value">
                    #{item.isInit,jdbcType=INTEGER}
                </if>
                <if test="'stat_delegate_value'.toString() == column.value">
                    #{item.statDelegateValue,jdbcType=DECIMAL}
                </if>
                <if test="'stat_delegate_released'.toString() == column.value">
                    #{item.statDelegateReleased,jdbcType=DECIMAL}
                </if>
                <if test="'stat_valid_addrs'.toString() == column.value">
                    #{item.statValidAddrs,jdbcType=INTEGER}
                </if>
                <if test="'stat_invalid_addrs'.toString() == column.value">
                    #{item.statInvalidAddrs,jdbcType=INTEGER}
                </if>
                <if test="'stat_block_reward_value'.toString() == column.value">
                    #{item.statBlockRewardValue,jdbcType=DECIMAL}
                </if>
                <if test="'stat_staking_reward_value'.toString() == column.value">
                    #{item.statStakingRewardValue,jdbcType=DECIMAL}
                </if>
                <if test="'stat_fee_reward_value'.toString() == column.value">
                    #{item.statFeeRewardValue,jdbcType=DECIMAL}
                </if>
                <if test="'predict_staking_reward'.toString() == column.value">
                    #{item.predictStakingReward,jdbcType=DECIMAL}
                </if>
                <if test="'create_time'.toString() == column.value">
                    #{item.createTime,jdbcType=TIMESTAMP}
                </if>
                <if test="'update_time'.toString() == column.value">
                    #{item.updateTime,jdbcType=TIMESTAMP}
                </if>
                <if test="'reward_per'.toString() == column.value">
                    #{item.rewardPer,jdbcType=INTEGER}
                </if>
                <if test="'next_reward_per'.toString() == column.value">
                    #{item.nextRewardPer,jdbcType=INTEGER}
                </if>
                <if test="'next_reward_per_mod_epoch'.toString() == column.value">
                    #{item.nextRewardPerModEpoch,jdbcType=INTEGER}
                </if>
                <if test="'have_dele_reward'.toString() == column.value">
                    #{item.haveDeleReward,jdbcType=DECIMAL}
                </if>
                <if test="'pre_dele_annualized_rate'.toString() == column.value">
                    #{item.preDeleAnnualizedRate,jdbcType=DOUBLE}
                </if>
                <if test="'dele_annualized_rate'.toString() == column.value">
                    #{item.deleAnnualizedRate,jdbcType=DOUBLE}
                </if>
                <if test="'total_dele_reward'.toString() == column.value">
                    #{item.totalDeleReward,jdbcType=DECIMAL}
                </if>
                <if test="'pre_total_dele_reward'.toString() == column.value">
                    #{item.preTotalDeleReward,jdbcType=DECIMAL}
                </if>
                <if test="'exception_status'.toString() == column.value">
                    #{item.exceptionStatus,jdbcType=INTEGER}
                </if>
                <if test="'un_stake_freeze_duration'.toString() == column.value">
                    #{item.unStakeFreezeDuration,jdbcType=INTEGER}
                </if>
                <if test="'un_stake_end_block'.toString() == column.value">
                    #{item.unStakeEndBlock,jdbcType=BIGINT}
                </if>
                <if test="'zero_produce_freeze_duration'.toString() == column.value">
                    #{item.zeroProduceFreezeDuration,jdbcType=INTEGER}
                </if>
                <if test="'zero_produce_freeze_epoch'.toString() == column.value">
                    #{item.zeroProduceFreezeEpoch,jdbcType=INTEGER}
                </if>
                <if test="'low_rate_slash_count'.toString() == column.value">
                    #{item.lowRateSlashCount,jdbcType=INTEGER}
                </if>
                <if test="'annualized_rate_info'.toString() == column.value">
                    #{item.annualizedRateInfo,jdbcType=LONGVARCHAR}
                </if>
                <if test="'node_settle_statis_info'.toString() == column.value">
                    #{item.nodeSettleStatisInfo,jdbcType=LONGVARCHAR}
                </if>
                <if test="'node_apr'.toString() == column.value">
                    #{item.nodeApr,jdbcType=LONGVARCHAR}
                </if>
            </foreach>
            )
        </foreach>
    </insert>


</mapper>